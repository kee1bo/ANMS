/**\n * Aggressive Modal Fix - Completely removes persistent modals\n * This fixes the issue where modals appear automatically and won't close\n */\n\n(function() {\n    'use strict';\n    \n    // Function to completely remove all modals\n    function destroyAllModals() {\n        console.log('üî• Destroying all modals...');\n        \n        // Find and remove all modal elements\n        const modalSelectors = [\n            '.modal',\n            '.modal-overlay', \n            '[class*=\"modal\"]',\n            '[id*=\"modal\"]',\n            'div[style*=\"position: fixed\"]',\n            'div[style*=\"z-index\"]'\n        ];\n        \n        modalSelectors.forEach(selector => {\n            try {\n                const elements = document.querySelectorAll(selector);\n                elements.forEach(element => {\n                    // Check if it looks like a modal (has backdrop-like properties)\n                    const styles = window.getComputedStyle(element);\n                    if (styles.position === 'fixed' && \n                        (styles.zIndex > 1000 || \n                         element.classList.toString().includes('modal') ||\n                         element.id.includes('modal'))) {\n                        \n                        console.log('üóëÔ∏è Removing modal element:', element);\n                        element.remove();\n                    }\n                });\n            } catch (e) {\n                console.log('Error removing modals with selector:', selector, e);\n            }\n        });\n        \n        // Clear modal containers\n        const containers = document.querySelectorAll('#modal-container, .modal-container, [id*=\"modal-container\"]');\n        containers.forEach(container => {\n            container.innerHTML = '';\n            container.style.display = 'none';\n        });\n        \n        // Remove modal-related classes from body\n        document.body.classList.remove('modal-open', 'modal-active', 'no-scroll');\n        document.body.style.overflow = '';\n        document.body.style.position = '';\n        document.body.style.width = '';\n        \n        // Remove any backdrop elements\n        const backdrops = document.querySelectorAll('[class*=\"backdrop\"], [class*=\"overlay\"]');\n        backdrops.forEach(backdrop => {\n            const styles = window.getComputedStyle(backdrop);\n            if (styles.position === 'fixed' && styles.zIndex > 1000) {\n                backdrop.remove();\n            }\n        });\n        \n        console.log('‚úÖ All modals destroyed');\n    }\n    \n    // Aggressive cleanup function\n    function aggressiveCleanup() {\n        destroyAllModals();\n        \n        // Also check for any elements that might be acting as modals\n        const allElements = document.querySelectorAll('*');\n        allElements.forEach(element => {\n            const styles = window.getComputedStyle(element);\n            \n            // If element has modal-like properties, hide it\n            if (styles.position === 'fixed' && \n                styles.zIndex > 1000 && \n                (styles.backgroundColor.includes('rgba') || styles.background.includes('rgba')) &&\n                element.offsetWidth > window.innerWidth * 0.8 &&\n                element.offsetHeight > window.innerHeight * 0.8) {\n                \n                console.log('üéØ Found suspicious modal-like element:', element);\n                element.style.display = 'none !important';\n                element.style.visibility = 'hidden !important';\n                element.style.opacity = '0 !important';\n                element.style.pointerEvents = 'none !important';\n            }\n        });\n    }\n    \n    // Run cleanup immediately\n    aggressiveCleanup();\n    \n    // Run cleanup when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', aggressiveCleanup);\n    }\n    \n    // Run cleanup multiple times to catch dynamically created modals\n    setTimeout(aggressiveCleanup, 50);\n    setTimeout(aggressiveCleanup, 100);\n    setTimeout(aggressiveCleanup, 200);\n    setTimeout(aggressiveCleanup, 500);\n    setTimeout(aggressiveCleanup, 1000);\n    \n    // Add mutation observer to catch dynamically added modals\n    const observer = new MutationObserver(function(mutations) {\n        let shouldCleanup = false;\n        \n        mutations.forEach(function(mutation) {\n            mutation.addedNodes.forEach(function(node) {\n                if (node.nodeType === 1) { // Element node\n                    // Check if added node is a modal\n                    if (node.classList && (\n                        node.classList.contains('modal') || \n                        node.classList.contains('modal-overlay') ||\n                        node.className.includes('modal'))) {\n                        shouldCleanup = true;\n                    }\n                    \n                    // Check if added node contains modals\n                    if (node.querySelectorAll) {\n                        const modals = node.querySelectorAll('.modal, .modal-overlay, [class*=\"modal\"]');\n                        if (modals.length > 0) {\n                            shouldCleanup = true;\n                        }\n                    }\n                }\n            });\n        });\n        \n        if (shouldCleanup) {\n            console.log('üîç Detected modal creation, running cleanup...');\n            setTimeout(aggressiveCleanup, 10);\n        }\n    });\n    \n    // Start observing\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    \n    // Global click handler to destroy any remaining modals\n    document.addEventListener('click', function(e) {\n        // If clicking on anything that looks like a modal backdrop\n        const element = e.target;\n        const styles = window.getComputedStyle(element);\n        \n        if (styles.position === 'fixed' && \n            styles.zIndex > 1000 && \n            (element.classList.toString().includes('modal') || \n             element.id.includes('modal') ||\n             styles.backgroundColor.includes('rgba'))) {\n            \n            console.log('üñ±Ô∏è Click detected on modal-like element, destroying...');\n            aggressiveCleanup();\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }, true);\n    \n    // Global escape key handler\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape') {\n            aggressiveCleanup();\n        }\n    });\n    \n    // Cleanup on window focus (in case modal appears when switching tabs)\n    window.addEventListener('focus', aggressiveCleanup);\n    \n    console.log('üõ°Ô∏è Aggressive modal prevention system activated');\n    \n})();"