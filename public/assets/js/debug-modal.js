/**\n * Debug Modal Script - Helps identify what's creating the persistent modal\n */\n\n(function() {\n    'use strict';\n    \n    console.log('🔍 Modal Debug Script Started');\n    \n    // Function to analyze all elements on the page\n    function analyzePageElements() {\n        console.log('📊 Analyzing all page elements...');\n        \n        const allElements = document.querySelectorAll('*');\n        const suspiciousElements = [];\n        \n        allElements.forEach((element, index) => {\n            const styles = window.getComputedStyle(element);\n            const rect = element.getBoundingClientRect();\n            \n            // Check for modal-like characteristics\n            const isFixed = styles.position === 'fixed';\n            const hasHighZIndex = parseInt(styles.zIndex) > 1000;\n            const hasBackdrop = styles.backgroundColor.includes('rgba') || styles.background.includes('rgba');\n            const isLarge = rect.width > window.innerWidth * 0.5 && rect.height > window.innerHeight * 0.5;\n            const hasModalClass = element.className.toString().toLowerCase().includes('modal');\n            const hasModalId = element.id.toLowerCase().includes('modal');\n            \n            if (isFixed || hasHighZIndex || hasBackdrop || hasModalClass || hasModalId) {\n                const elementInfo = {\n                    element: element,\n                    index: index,\n                    tagName: element.tagName,\n                    className: element.className,\n                    id: element.id,\n                    position: styles.position,\n                    zIndex: styles.zIndex,\n                    backgroundColor: styles.backgroundColor,\n                    width: rect.width,\n                    height: rect.height,\n                    isVisible: rect.width > 0 && rect.height > 0,\n                    isFixed: isFixed,\n                    hasHighZIndex: hasHighZIndex,\n                    hasBackdrop: hasBackdrop,\n                    isLarge: isLarge,\n                    hasModalClass: hasModalClass,\n                    hasModalId: hasModalId\n                };\n                \n                suspiciousElements.push(elementInfo);\n            }\n        });\n        \n        console.log('🚨 Found', suspiciousElements.length, 'suspicious elements:');\n        suspiciousElements.forEach((info, index) => {\n            console.log(`Element ${index + 1}:`, info);\n            \n            // If this looks like a modal, highlight it\n            if (info.isFixed && info.hasHighZIndex && info.isVisible) {\n                console.log('🎯 This element looks like a modal!', info.element);\n                info.element.style.border = '5px solid red';\n                info.element.style.boxShadow = '0 0 20px red';\n                \n                // Add click handler to remove it\n                info.element.addEventListener('click', function() {\n                    console.log('🗑️ Removing clicked modal element');\n                    this.remove();\n                });\n            }\n        });\n        \n        return suspiciousElements;\n    }\n    \n    // Function to monitor DOM changes\n    function startDOMMonitoring() {\n        const observer = new MutationObserver(function(mutations) {\n            mutations.forEach(function(mutation) {\n                if (mutation.addedNodes.length > 0) {\n                    console.log('🔄 DOM changed, new nodes added:', mutation.addedNodes);\n                    \n                    mutation.addedNodes.forEach(function(node) {\n                        if (node.nodeType === 1) { // Element node\n                            const styles = window.getComputedStyle(node);\n                            if (styles.position === 'fixed' || \n                                node.className.toString().includes('modal') ||\n                                node.id.includes('modal')) {\n                                console.log('🚨 Suspicious element added:', node);\n                                node.style.border = '3px solid orange';\n                            }\n                        }\n                    });\n                }\n            });\n        });\n        \n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeFilter: ['class', 'style']\n        });\n        \n        console.log('👀 DOM monitoring started');\n    }\n    \n    // Run analysis immediately\n    analyzePageElements();\n    \n    // Run analysis when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', analyzePageElements);\n    }\n    \n    // Run analysis after a delay\n    setTimeout(analyzePageElements, 1000);\n    \n    // Start monitoring DOM changes\n    startDOMMonitoring();\n    \n    // Add global click handler to log clicks\n    document.addEventListener('click', function(e) {\n        const element = e.target;\n        const styles = window.getComputedStyle(element);\n        \n        console.log('🖱️ Click detected on:', {\n            element: element,\n            tagName: element.tagName,\n            className: element.className,\n            id: element.id,\n            position: styles.position,\n            zIndex: styles.zIndex\n        });\n        \n        // If clicking on a fixed element with high z-index, it might be our modal\n        if (styles.position === 'fixed' && parseInt(styles.zIndex) > 1000) {\n            console.log('🎯 Clicked on potential modal element!');\n        }\n    }, true);\n    \n    console.log('🔍 Modal Debug Script Ready - Check console for analysis');\n    \n})();"