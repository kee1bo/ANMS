/**\n * Instant Modal Killer - Immediately removes any modal on page load\n */\n\n// Run immediately - don't wait for anything\n(function() {\n    'use strict';\n    \n    console.log('ðŸ”¥ INSTANT MODAL KILLER ACTIVATED');\n    \n    function killAllModals() {\n        // Get ALL elements on the page\n        const allElements = document.getElementsByTagName('*');\n        let killedCount = 0;\n        \n        for (let i = 0; i < allElements.length; i++) {\n            const element = allElements[i];\n            \n            // Check if element might be a modal\n            const className = element.className || '';\n            const id = element.id || '';\n            const style = element.style || {};\n            \n            if (\n                // Has modal in class name\n                className.toString().toLowerCase().includes('modal') ||\n                // Has modal in ID\n                id.toLowerCase().includes('modal') ||\n                // Is positioned fixed with high z-index\n                (element.style.position === 'fixed' && parseInt(element.style.zIndex) > 1000) ||\n                // Has computed styles that look like a modal\n                (window.getComputedStyle && (() => {\n                    try {\n                        const computed = window.getComputedStyle(element);\n                        return computed.position === 'fixed' && \n                               parseInt(computed.zIndex) > 1000 &&\n                               (computed.backgroundColor.includes('rgba') || \n                                element.offsetWidth > window.innerWidth * 0.7);\n                    } catch (e) {\n                        return false;\n                    }\n                })())\n            ) {\n                console.log('ðŸ’€ KILLING MODAL:', element);\n                \n                // Multiple ways to kill it\n                element.style.display = 'none';\n                element.style.visibility = 'hidden';\n                element.style.opacity = '0';\n                element.style.pointerEvents = 'none';\n                element.style.position = 'absolute';\n                element.style.top = '-99999px';\n                element.style.left = '-99999px';\n                element.style.zIndex = '-1';\n                \n                // Try to remove it completely\n                try {\n                    element.parentNode && element.parentNode.removeChild(element);\n                } catch (e) {\n                    // If can't remove, just hide it\n                }\n                \n                killedCount++;\n            }\n        }\n        \n        // Clean up body\n        document.body.classList.remove('modal-open', 'modal-active');\n        document.body.style.overflow = '';\n        document.body.style.position = '';\n        \n        if (killedCount > 0) {\n            console.log(`ðŸ’€ KILLED ${killedCount} MODALS`);\n        }\n        \n        return killedCount;\n    }\n    \n    // Kill modals immediately\n    killAllModals();\n    \n    // Kill modals when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', killAllModals);\n    }\n    \n    // Kill modals repeatedly for first few seconds\n    let attempts = 0;\n    const killer = setInterval(() => {\n        attempts++;\n        const killed = killAllModals();\n        \n        if (attempts > 50 || (attempts > 10 && killed === 0)) {\n            clearInterval(killer);\n            console.log('ðŸ’€ MODAL KILLER STOPPED AFTER', attempts, 'ATTEMPTS');\n        }\n    }, 100);\n    \n    // Override any modal creation functions\n    const originalCreateElement = document.createElement;\n    document.createElement = function(tagName) {\n        const element = originalCreateElement.call(this, tagName);\n        \n        // Intercept any attempt to add modal classes\n        const originalSetAttribute = element.setAttribute;\n        element.setAttribute = function(name, value) {\n            if (name === 'class' && value && value.toString().includes('modal')) {\n                console.log('ðŸš« BLOCKED MODAL CREATION');\n                return; // Don't set the class\n            }\n            return originalSetAttribute.call(this, name, value);\n        };\n        \n        return element;\n    };\n    \n    console.log('ðŸ’€ MODAL KILLER READY - NO MODALS SHALL PASS!');\n    \n})();"